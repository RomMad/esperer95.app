# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    documents_directory: '%kernel.project_dir%/public/uploads/documents'
    admin_email: '%env(ADMIN_EMAIL)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        # bind:
        #     $adminEmail: '%admin_email%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\DataFixtures\Processor\UserProcessor:
        arguments:
            - "@security.user_password_encoder.generic"
        tags: [ { name: fidry_alice_data_fixtures.processor } ]

    App\EventListener\ExceptionListener:
        arguments:
            $exceptionListener: '%env(EXCEPTION_LISTENER)%'
            $adminEmail: '%admin_email%'
        tags:
            - { name: 'kernel.event_listener', event: 'kernel.exception' }
            
    # App\EventSubscriber\ExceptionSubscriber:
    #     arguments:
    #         $exceptionListener: '%env(EXCEPTION_LISTENER)%'
    #         $adminEmail: '%admin_email%'

    # App\EventListener\EvaluationEditListener: # Test
    #     arguments: 
    #         $evaluationListener: '%env(EVALUATION_LISTENER)%'
    #     tags:
    #         - { name: 'kernel.event_listener', event: 'evaluation.monitoring.send_mail', method: 'onEdit' }  

    App\EventListener\LoginListener:
        tags:
            - { name: 'kernel.event_listener', event: 'security.interactive_login' }

    App\EventListener\MaintenanceListener:
        arguments:
            $maintenance: '%env(MAINTENANCE)%'
        tags:
        - { name: 'kernel.event_listener', event: 'kernel.request', method: 'onKernelRequest' }
    
    App\EventListener\TerminateListener:
        arguments: 
            $evaluationListener: '%env(EVALUATION_LISTENER)%'
        tags:
            - { name: 'kernel.event_listener', event: 'kernel.terminate' }

    App\Notification\MailNotification:
        arguments:
            $host: '%env(MAILER_HOST)%'
            $username: '%env(MAILER_USERNAME)%'
            $password: '%env(MAILER_PASSWORD)%'
            $port: '%env(MAILER_PORT)%'

    App\Service\FileUploader:
        arguments:
            $targetDirectory: '%documents_directory%'
            $tinifyKey: '%env(TINIFY_KEY)%'


    App\Service\OptimizeImage:
        arguments:
            $tinifyKey: '%env(TINIFY_KEY)%'

    App\Twig\AppExtension:
        lazy: true

    Twig\CacheExtension\CacheProviderInterface:
        class: Twig\CacheExtension\CacheProvider\PsrCacheAdapter

    Twig\CacheExtension\CacheStrategyInterface:
        class: Twig\CacheExtension\CacheStrategy\LifetimeCacheStrategy

    Twig\CacheExtension\Extension:
        tags:
        - { name: twig.extension }
        
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    Tinify\Tinify: ~
    Tinify\Source: ~